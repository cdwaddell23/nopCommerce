@model CampgroundPagingFilteringModel

@*view mode*@
@if (Model.AllowViewModeChanging)
{
    <div class="campground-viewmode">
        <span>@T("Catalog.ViewMode")</span>
        @if (Model.AvailableViewModes.Count > 1)
        {
            var gridMode = Model.AvailableViewModes[0];
            var listMode = Model.AvailableViewModes[1];

            <a class="viewmode-icon  @if (gridMode.Selected){<text>selected</text>}" href="@gridMode.Value" title="@gridMode.Text">
                <i class="material-icons">apps</i>
                @*@gridMode.Text*@
            </a>

            <a class="viewmode-icon  @if (listMode.Selected){<text>selected</text>}" href="@listMode.Value" title="@listMode.Text">
                <i class="material-icons">view_list</i>
                @*@listMode.Text*@
            </a>
        }
    </div>
}
@*sorting*@
@if (Model.AllowSorting)
{
    <div class="campground-sorting pull-left">
        <span>@T("Catalog.OrderBy")</span>
        @Html.DropDownList("campgrounds-orderby", Model.AvailableSortOptions, new { onchange = "setLocation(this.value);" })
    </div>
}
@*page size*@
@if (Model.AllowCustomersToSelectPageSize)
{
    <div class="campground-page-size pull-right">
        <span>@T("Catalog.PageSize")</span>
        @Html.DropDownList("campgrounds-pagesize", Model.PageSizeOptions, new { onchange = "setLocation(this.value);" })
        <span>@T("Catalog.PageSize.PerPage")</span>
    </div>
}
